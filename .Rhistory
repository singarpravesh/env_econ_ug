#| echo: false
# Load required library
library(ggplot2)
library(ggforce)
# Create a data frame representing the time periods and their positions
time_periods <- data.frame(
time = 0:10,                 # Time points from t_0 to t_10
position = 0:10              # Corresponding positions on the line
)
# Add a column for LaTeX-style labels
time_periods$label <- sapply(time_periods$time, function(t) as.expression(bquote(t[.(t)])))
# Create the plot
ggplot(time_periods, aes(x = position, y = 0)) +
# Draw the line
geom_segment(aes(xend = position, yend = 0), color = "black", size = 1) +
# Add points at each segment
geom_point(color = "red", size = 3) +
# Add labels for each time period using LaTeX-style formatting
geom_text(aes(label = label), vjust = -1, size = 5, parse = TRUE) +
# Customize the plot
ggtitle("Time Period Representation") +
theme_minimal() +
theme(
axis.text.x = element_blank(),    # Remove x-axis text
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.title.x = element_blank(),  # Remove x-axis title
axis.text.y = element_blank(),   # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
panel.grid = element_blank()     # Remove gridlines
)
#| message: false
#| warning: false
#| echo: false
# Load required library
library(ggplot2)
# Create a data frame representing the time periods and their positions
time_periods <- data.frame(
time = 0:10,                 # Time points from t_0 to t_10
position = 0:10              # Corresponding positions on the line
)
# Add a column for labels using expressions
time_periods$label <- paste0("t[", time_periods$time, "]") # Create labels as text
# Create the plot
ggplot(time_periods, aes(x = position, y = 0)) +
# Draw the line
geom_segment(aes(xend = position, yend = 0), color = "black", size = 1) +
# Add points at each segment
geom_point(color = "red", size = 3) +
# Add labels for each time period using parse = TRUE
geom_text(aes(label = label), vjust = -1, size = 5, parse = TRUE) +
# Customize the plot
ggtitle("Time Period Representation") +
theme_minimal() +
theme(
axis.text.x = element_blank(),    # Remove x-axis text
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.title.x = element_blank(),  # Remove x-axis title
axis.text.y = element_blank(),   # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
panel.grid = element_blank()     # Remove gridlines
)
#| message: false
#| warning: false
#| echo: false
# Load required libraries
library(ggplot2)
library(grid)
# Create a data frame for points inside the open set
points_inside <- data.frame(
x = c(0.2, 0.3, 0.5, 0.6, 0.4),
y = c(0.5, 0.7, 0.4, 0.6, 0.3)
)
# Create the plot
ggplot() +
# Draw the open set as a circle
geom_circle(aes(x0 = 0.5, y0 = 0.5, r = 0.4), color = "blue", fill = "transparent", size = 1) +
# Add points inside the set
geom_point(data = points_inside, aes(x = x, y = y), color = "black", size = 3) +
# Add "Added elements" label and arrow
annotate("text", x = -0.2, y = 0.6, label = "Added elements", size = 5, hjust = 0) +
annotate("curve", x = -0.1, y = 0.55, xend = 0.2, yend = 0.55,
curvature = -0.3, arrow = arrow(length = unit(0.03, "npc")), color = "black") +
# Add "Eliminated element" label and arrow
annotate("text", x = 1.2, y = 0.6, label = "Eliminated element", size = 5, hjust = 0) +
annotate("curve", x = 0.8, y = 0.55, xend = 1.1, yend = 0.55,
curvature = -0.3, arrow = arrow(length = unit(0.03, "npc")), color = "black") +
# Customize the plot
xlim(-0.5, 1.5) +
ylim(0, 1) +
theme_void()
#| message: false
#| warning: false
#| echo: false
# Load required libraries
library(ggplot2)
library(grid)
# Create a data frame for points inside the "U" set
points_inside <- data.frame(
x = c(0.2, 0.3, 0.5, 0.6, 0.4),
y = c(0.5, 0.7, 0.4, 0.6, 0.3)
)
# Create the plot
ggplot() +
# Draw the U shape (combination of two arcs and a straight line)
# Left side of the U
geom_curve(aes(x = 0, y = 0.6, xend = 0, yend = 0), curvature = -0.5, color = "blue", size = 1) +
# Bottom part of the U
geom_segment(aes(x = 0, y = 0, xend = 1, yend = 0), color = "blue", size = 1) +
# Right side of the U
geom_curve(aes(x = 1, y = 0.6, xend = 1, yend = 0), curvature = 0.5, color = "blue", size = 1) +
# Add points inside the set
geom_point(data = points_inside, aes(x = x, y = y), color = "black", size = 3) +
# Add "Added elements" label and arrow
annotate("text", x = -0.2, y = 0.6, label = "Added elements", size = 5, hjust = 0) +
annotate("curve", x = -0.1, y = 0.55, xend = 0.2, yend = 0.55,
curvature = -0.3, arrow = arrow(length = unit(0.03, "npc")), color = "black") +
# Add "Eliminated element" label and arrow
annotate("text", x = 1.2, y = 0.6, label = "Eliminated element", size = 5, hjust = 0) +
annotate("curve", x = 0.8, y = 0.55, xend = 1.1, yend = 0.55,
curvature = -0.3, arrow = arrow(length = unit(0.03, "npc")), color = "black") +
# Customize the plot
xlim(-0.5, 1.5) +
ylim(0, 1) +
theme_void()
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
#| message: false
#| warning: false
#| echo: false
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Calculate the optimal rate of extraction/production
optimal_y <- 10 - 4          # Solve for y_t when p_t = mc
optimal_point <- data.frame(y_t = optimal_y, p_t = 4)
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
annotate("text", x = optimal_y + 0.2, y = 3.5, label = "Optimal Rate of Extraction/Production", color = "black", size = 4) +
geom_point(data = optimal_point, aes(x = y_t, y = p_t), color="black", size=3) + # Mark the intersection point
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
#| message: false
#| warning: false
#| echo: false
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Calculate the intersection point
optimal_y <- 6               # Optimal production level (where p = mc)
optimal_p <- 4               # Price at optimal production level
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = optimal_y, color = "green", linetype = "dotted", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
annotate("text", x = optimal_y + 0.2, y = -0.5, label = "Optimal Rate of Extraction/Production", color = "green", size = 5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
#| message: false
#| warning: false
#| echo: false
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Calculate the intersection point
optimal_y <- 6               # This is where p(y_t) intersects mc (10 - y_t = 4)
optimal_p <- 4               # The price at this optimal point
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = optimal_y, color = "green", linetype = "dotted", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
annotate("text", x = optimal_y + 0.3, y = -0.5, label = "Optimal Rate of Extraction/Production", color = "green", size = 5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
#| message: false
#| warning: false
#| echo: false
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Calculate the intersection point
optimal_y <- 6               # This is where p(y_t) intersects mc (10 - y_t = 4)
optimal_p <- 4               # The price at this optimal point
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = optimal_y, color = "green", linetype = "dotted", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
annotate("text", x = optimal_y + 0.3, y = -0.5, label = "Optimal Rate of Extraction/Production", color = "green", size = 5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
#| message: false
#| warning: false
#| echo: false
# Load required library
library(ggplot2)
# Create data for the price curve (downward sloping)
y_t <- seq(0, 100, length.out = 100)
p_t <- 100 - 0.5 * y_t  # Linear downward sloping price function
# Create data frame
df <- data.frame(
y_t = y_t,
p_t = p_t,
mc = rep(30, length(y_t))  # Constant marginal cost at 30
)
# Create the plot
ggplot(df, aes(x = y_t)) +
# Add the price curve
geom_line(aes(y = p_t), color = "blue", size = 1) +
# Add the MC line
geom_line(aes(y = mc), color = "red", size = 1) +
# Add labels for the curves
annotate("text", x = 80, y = 65, label = "p = p(y_t)", color = "blue") +
annotate("text", x = 80, y = 35, label = "mc", color = "red") +
# Customize axes and labels
labs(
x = "y_t",
y = "p_t",
title = "Price and Marginal Cost Curves"
) +
theme_minimal() +
# Adjust the plot range
scale_y_continuous(limits = c(0, 100)) +
scale_x_continuous(limits = c(0, 100))
#| message: false
#| warning: false
#| echo: false
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
#| message: false
#| warning: false
#| echo: false
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
# Combine into a data frame
data <- data.frame(y_t, p_t, mc)
# Calculate the intersection point
intersection_y <- 10 - 4  # where p_t = mc
intersection_x <- intersection_y  # since y_t = x when p = mc
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
# Add vertical line from intersection to x-axis
geom_segment(aes(x = intersection_x, xend = intersection_x, y = 0, yend = intersection_y),
color = "green", linetype="dotted", size=1) +
# Label the point OP on the x-axis
annotate("text", x = intersection_x + 0.2, y = 0.5, label = "OP", color = "green", size=5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Horizontal MC curve at p = 4
amc <- rep(6, length(y_t))    # Augmented Marginal Curve at p = 6
# Combine into a data frame
data <- data.frame(y_t, p_t, mc, amc)
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
geom_hline(aes(yintercept = 6), color = "purple", linetype = "dotted", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
# Label the AMC line
annotate("text", x = 10, y = 6.2, label = "AMC", color = "purple", size = 5) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
# Load necessary library
library(ggplot2)
# Create a data frame for the values
y_t <- seq(0, 10, by = 0.1)  # y_t values
p_t <- 10 - y_t              # Downward sloping price function (p = p(y_t))
mc <- rep(4, length(y_t))    # Original MC curve at p = 4
amc <- rep(6, length(y_t))    # Augmented Marginal Curve at p = 6
# Combine into a data frame
data <- data.frame(y_t, p_t, mc, amc)
# Create the plot
ggplot(data, aes(x = y_t)) +
geom_line(aes(y = p_t), color = "blue", size = 1) +
geom_hline(aes(yintercept = 4), color = "red", linetype = "dashed", size = 1) +
geom_hline(aes(yintercept = 6), color = "purple", linetype = "dotted", size = 1) +
labs(title = "Price and Marginal Cost Curves",
x = expression(y[t]),
y = expression(p[t])) +
annotate("text", x = 5, y = 6, label = expression(p == p(y[t])), color = "blue", size = 5) +
annotate("text", x = 10, y = 4.2, label = "mc", color = "red", size = 5) +
# Label the AMC line
annotate("text", x = 10, y = 6.2, label = "AMC", color = "purple", size = 5) +
# Add an up arrow to indicate the shift of the MC curve
geom_segment(aes(x = 8, xend = 8, y = 4, yend = 5),
arrow = arrow(length=unit(0.2,"inches")),
color="black", size=1) +
# Label for the arrow indicating upward shift
annotate("text", x = 8.5, y = 5.5, label="Shift Upward", color="black", size=4) +
theme_minimal() +
xlim(0, 10) + ylim(0, 10)
plot(1:5, 1:5)
ggplot()
ggplot(aes(x = x, y = y))
ggplot(aes(x = 1:5, y = 1:5))
ggplot(data = data.frame(x = 1:5,
y = 1:5))
ggplot(data = data.frame(x = 1:5,
y = 1:5))+
geom_blank()
ggplot(data = data.frame(x = 1:5,
y = 1:5),
aes(x = x, y = y))+
geom_blank()
ggplot(data = data.frame(x = 1:5,
y = 1:5),
aes(x = x, y = y))+
geom_hline(yintercept = 2.5)
knitr::include_graphics("images/fig_1.png")
#| echo: false
#| out-width: "50%"
knitr::include_graphics("images/do_state_stage_1.png")
#| echo: false
library(ggplot2)
library(dplyr)
# Simulate optimal path
simulate_optimal_path <- function(params, T=50) {
model <- mining_model(params)
# Solve using simple Euler method
dt <- 0.1
times <- seq(0, T, by=dt)
n <- length(times)
X <- numeric(n)
mu <- numeric(n)
u <- numeric(n)
# Initial conditions
X[1] <- params$X0
mu[1] <- params$price/2  # Initial guess
# Time stepping
for(i in 2:n) {
u[i-1] <- model$optimal_u(times[i-1], X[i-1], mu[i-1])
X[i] <- X[i-1] + model$dX(times[i-1], X[i-1], u[i-1]) * dt
mu[i] <- mu[i-1] + model$dmu(times[i-1], X[i-1], mu[i-1], u[i-1]) * dt
}
data.frame(time=times, stock=X, shadow_price=mu, extraction=u)
}
# Plot optimal path
ggplot(simulate_optimal_path(params)) +
geom_line(aes(time, stock, color="Resource Stock")) +
geom_line(aes(time, extraction * 10, color="Extraction Rate (x10)")) +
theme_minimal() +
labs(title="Optimal Resource Extraction Path",
y="Quantity", x="Time")
#| echo: false
# Full optimal control model
mining_model <- function(params) {
with(params, {
# State equation
dX <- function(t, X, u) {
-u  # Resource decreases with extraction
}
# Current Value Hamiltonian components
revenue <- function(u) price * u
cost <- function(X, u) base_cost * u + extra_cost * u^2/X
growth <- function(X) 0  # Non-renewable resource
# Optimal control (from Maximum Principle)
optimal_u <- function(t, X, mu) {
u <- (price - mu - base_cost) * X / (2 * extra_cost)
return(pmax(0, pmin(u, X)))  # Bounded control
}
# Costate equation
dmu <- function(t, X, mu, u) {
rho * mu - extra_cost * u^2/X^2
}
return(list(dX=dX, dmu=dmu, optimal_u=optimal_u))
})
}
# Parameters for realistic gold mine
params <- list(
price = 1500,        # $/oz
base_cost = 500,     # $/oz
extra_cost = 1000,   # Cost increase factor
rho = 0.05,         # Discount rate
T = 20              # Time horizon
)
# Plot optimal path
ggplot(simulate_optimal_path(params)) +
geom_line(aes(time, stock, color="Resource Stock")) +
geom_line(aes(time, extraction * 10, color="Extraction Rate (x10)")) +
theme_minimal() +
labs(title="Optimal Resource Extraction Path",
y="Quantity", x="Time")
#| echo: false
library(ggplot2)
library(dplyr)
# Simulate optimal path
simulate_optimal_path <- function(params, T=50) {
model <- mining_model(params)
# Solve using simple Euler method
dt <- 0.1
times <- seq(0, T, by=dt)
n <- length(times)
X <- numeric(n)
mu <- numeric(n)
u <- numeric(n)
# Initial conditions
X[1] <- params$X0
mu[1] <- params$price/2  # Initial guess
# Time stepping
for(i in 2:n) {
u[i-1] <- model$optimal_u(times[i-1], X[i-1], mu[i-1])
X[i] <- X[i-1] + model$dX(times[i-1], X[i-1], u[i-1]) * dt
mu[i] <- mu[i-1] + model$dmu(times[i-1], X[i-1], mu[i-1], u[i-1]) * dt
}
data.frame(time=times, stock=X, shadow_price=mu, extraction=u)
}
# Plot optimal path
ggplot(simulate_optimal_path(params)) +
geom_line(aes(time, stock, color="Resource Stock")) +
geom_line(aes(time, extraction * 10, color="Extraction Rate (x10)")) +
theme_minimal() +
labs(title="Optimal Resource Extraction Path",
y="Quantity", x="Time")
